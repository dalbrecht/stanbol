/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.4-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.05.13 at 09:50:16 AM EEST 
//

package org.apache.stanbol.ontologymanager.store.model;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each Java content interface and Java element interface generated
 * in the eu.iksproject.fise.stores.persistencestore.rest.model package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the Java representation for XML
 * content. The Java representation of XML content can consist of schema derived interfaces and classes
 * representing the binding of schema type definitions, element declarations and model groups. Factory methods
 * for each of these are provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private static final QName _URI_QNAME = new QName("model.rest.persistence.iks.srdc.com.tr", "URI");
    private static final QName _Description_QNAME = new QName("model.rest.persistence.iks.srdc.com.tr",
            "Description");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for
     * package: eu.iksproject.fise.stores.persistencestore.rest.model
     * 
     */
    public ObjectFactory() {}

    /**
     * Create an instance of {@link DisjointClasses }
     * 
     */
    public DisjointClasses createDisjointClasses() {
        return new DisjointClasses();
    }

    /**
     * Create an instance of {@link ResourceMetaInformationType }
     * 
     */
    public ResourceMetaInformationType createResourceMetaInformationType() {
        return new ResourceMetaInformationType();
    }

    /**
     * Create an instance of {@link ContainerClasses }
     * 
     */
    public ContainerClasses createContainerClasses() {
        return new ContainerClasses();
    }

    /**
     * Create an instance of {@link DatatypePropertyContext }
     * 
     */
    public DatatypePropertyContext createDatatypePropertyContext() {
        return new DatatypePropertyContext();
    }
    
    /**
     * Create an instance of {@link ImportsForOntology}
     */
    public ImportsForOntology createImportsForOntology(){
        return new ImportsForOntology();
    }

    /**
     * Create an instance of {@link IndividualsForOntology }
     * 
     */
    public IndividualsForOntology createIndividualsForOntology() {
        return new IndividualsForOntology();
    }

    /**
     * Create an instance of {@link ClassesForOntology }
     * 
     */
    public ClassesForOntology createClassesForOntology() {
        return new ClassesForOntology();
    }

    /**
     * Create an instance of {@link OntologyMetaInformation }
     * 
     */
    public OntologyMetaInformation createOntologyMetaInformation() {
        return new OntologyMetaInformation();
    }

    /**
     * Create an instance of {@link AdministeredOntologies }
     * 
     */
    public AdministeredOntologies createAdministeredOntologies() {
        return new AdministeredOntologies();
    }

    /**
     * Create an instance of {@link PropertyAssertions }
     * 
     */
    public PropertyAssertions createPropertyAssertions() {
        return new PropertyAssertions();
    }

    /**
     * Create an instance of {@link ClassConstraint }
     * 
     */
    public ClassConstraint createClassConstraint() {
        return new ClassConstraint();
    }

    /**
     * Create an instance of {@link ObjectPropertiesForOntology }
     * 
     */
    public ObjectPropertiesForOntology createObjectPropertiesForOntology() {
        return new ObjectPropertiesForOntology();
    }
    
    /**
     * Create an instance of {@link OntologyImport }
     * 
     */
    public OntologyImport createOntologyImport() {
        return new OntologyImport();
    }

    /**
     * Create an instance of {@link Range }
     * 
     */
    public Range createRange() {
        return new Range();
    }

    /**
     * Create an instance of {@link EquivalentClasses }
     * 
     */
    public EquivalentClasses createEquivalentClasses() {
        return new EquivalentClasses();
    }

    /**
     * Create an instance of {@link SuperProperties }
     * 
     */
    public SuperProperties createSuperProperties() {
        return new SuperProperties();
    }

    /**
     * Create an instance of {@link IndividualMetaInformation }
     * 
     */
    public IndividualMetaInformation createIndividualMetaInformation() {
        return new IndividualMetaInformation();
    }

    /**
     * Create an instance of {@link DatatypePropertiesForOntology }
     * 
     */
    public DatatypePropertiesForOntology createDatatypePropertiesForOntology() {
        return new DatatypePropertiesForOntology();
    }

    /**
     * Create an instance of {@link Superclasses }
     * 
     */
    public Superclasses createSuperclasses() {
        return new Superclasses();
    }

    /**
     * Create an instance of {@link PropertyAssertions.PropertyAssertion }
     * 
     */
    public PropertyAssertions.PropertyAssertion createPropertyAssertionsPropertyAssertion() {
        return new PropertyAssertions.PropertyAssertion();
    }

    /**
     * Create an instance of {@link IndividualContext }
     * 
     */
    public IndividualContext createIndividualContext() {
        return new IndividualContext();
    }

    /**
     * Create an instance of {@link ClassContext }
     * 
     */
    public ClassContext createClassContext() {
        return new ClassContext();
    }

    /**
     * Create an instance of {@link EquivalentProperties }
     * 
     */
    public EquivalentProperties createEquivalentProperties() {
        return new EquivalentProperties();
    }

    /**
     * Create an instance of {@link Domain }
     * 
     */
    public Domain createDomain() {
        return new Domain();
    }

    /**
     * Create an instance of {@link PropertyMetaInformation }
     * 
     */
    public PropertyMetaInformation createPropertyMetaInformation() {
        return new PropertyMetaInformation();
    }

    /**
     * Create an instance of {@link ClassMetaInformation }
     * 
     */
    public ClassMetaInformation createClassMetaInformation() {
        return new ClassMetaInformation();
    }

    /**
     * Create an instance of {@link ObjectPropertyContext }
     * 
     */
    public ObjectPropertyContext createObjectPropertyContext() {
        return new ObjectPropertyContext();
    }

    /**
     * Create an instance of {@link BuiltInResource }
     * 
     */
    public BuiltInResource createBuiltInResource() {
        return new BuiltInResource();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     */
    @XmlElementDecl(namespace = "model.rest.persistence.iks.srdc.com.tr", name = "URI")
    public JAXBElement<String> createURI(String value) {
        return new JAXBElement<String>(_URI_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     */
    @XmlElementDecl(namespace = "model.rest.persistence.iks.srdc.com.tr", name = "Description")
    public JAXBElement<String> createDescription(String value) {
        return new JAXBElement<String>(_Description_QNAME, String.class, null, value);
    }

}
